name: CI/CD to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 소스 체크아웃
        uses: actions/checkout@v3

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle 빌드
        run: ./gradlew build -x test --stacktrace

      - name: 빌드 아티팩트(JAR) 존재 여부 확인
        run : |
          echo "build/libs 디렉토리:"
          ls -al build/libs || echo "❌ JAR 파일 없음"

      - name: Docker 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest

      - name: EC2 SSH 접속 후 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/deploy
            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }} . 
            else
              git pull origin main
            fi
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker image prune -f --filter "until=24h"

      - name: 시간 기록
        id: date
        run: echo "date=$(date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_OUTPUT"

      - name: Slack 알림 전송
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ *AWS EC2 자동배포 완료!*",
              "attachments": [
                {
                  "fields": [
                    { "title": "브랜치", "value": "${{ github.ref }}", "short": true },
                    { "title": "커밋 SHA", "value": "${{ github.sha }}", "short": true },
                    { "title": "시간", "value": "${{ steps.date.outputs.date }}", "short": false }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Health Check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: curl -fsS --retry 3 http://$EC2_HOST/actuator/health
