{"version":3,"file":"601.js?_cache=8428bc624bdf66c69823","mappings":"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","sources":["webpack://grafana-metricsdrilldown-app/./services/sorting.ts","webpack://grafana-metricsdrilldown-app/./interactions.ts","webpack://grafana-metricsdrilldown-app/./services/levels.ts"],"sourcesContent":["import { OutlierDetector, type OutlierOutput } from '@bsull/augurs/outlier';\nimport {\n  doStandardCalcs,\n  fieldReducers,\n  FieldType,\n  outerJoinDataFrames,\n  ReducerID,\n  type DataFrame,\n} from '@grafana/data';\nimport { memoize } from 'lodash';\n\nimport { reportExploreMetrics } from '../interactions';\nimport { getLabelValueFromDataFrame } from './levels';\n\nexport const sortSeries = memoize(\n  (series: DataFrame[], sortBy: string, direction = 'asc') => {\n    if (sortBy === 'alphabetical') {\n      return sortSeriesByName(series, 'asc');\n    }\n\n    if (sortBy === 'alphabetical-reversed') {\n      return sortSeriesByName(series, 'desc');\n    }\n\n    if (sortBy === 'outliers') {\n      initOutlierDetector(series);\n    }\n\n    const reducer = (dataFrame: DataFrame) => {\n      try {\n        if (sortBy === 'outliers') {\n          return calculateOutlierValue(series, dataFrame);\n        }\n      } catch (e) {\n        console.error(e);\n        // ML sorting panicked, fallback to stdDev\n        sortBy = ReducerID.stdDev;\n      }\n      const fieldReducer = fieldReducers.get(sortBy);\n      const value =\n        fieldReducer.reduce?.(dataFrame.fields[1], true, true) ?? doStandardCalcs(dataFrame.fields[1], true, true);\n      return value[sortBy] ?? 0;\n    };\n\n    const seriesCalcs = series.map((dataFrame) => ({\n      value: reducer(dataFrame),\n      dataFrame: dataFrame,\n    }));\n\n    seriesCalcs.sort((a, b) => {\n      if (a.value !== undefined && b.value !== undefined) {\n        return b.value - a.value;\n      }\n      return 0;\n    });\n\n    if (direction === 'asc') {\n      seriesCalcs.reverse();\n    }\n\n    return seriesCalcs.map(({ dataFrame }) => dataFrame);\n  },\n  (series: DataFrame[], sortBy: string, direction = 'asc') => {\n    const firstTimestamp = seriesIsNotEmpty(series) ? series[0].fields[0].values[0] : 0;\n    const lastTimestamp = seriesIsNotEmpty(series)\n      ? series[series.length - 1].fields[0].values[series[series.length - 1].fields[0].values.length - 1]\n      : 0;\n    const firstValue = series.length > 0 ? getLabelValueFromDataFrame(series[0]) : '';\n    const lastValue = series.length > 0 ? getLabelValueFromDataFrame(series[series.length - 1]) : '';\n    const key = `${firstValue}_${lastValue}_${firstTimestamp}_${lastTimestamp}_${series.length}_${sortBy}_${direction}`;\n    return key;\n  }\n);\n\nfunction seriesIsNotEmpty(series: DataFrame[]) {\n  return series.length > 0 && series[0].fields.length > 0 && series[0].fields[0].values.length > 0;\n}\n\nconst initOutlierDetector = (series: DataFrame[]) => {\n  if (!wasmSupported()) {\n    return;\n  }\n\n  // Combine all frames into one by joining on time.\n  const joined = outerJoinDataFrames({ frames: series });\n  if (!joined) {\n    return;\n  }\n\n  // Get number fields: these are our series.\n  const joinedSeries = joined.fields.filter((f) => f.type === FieldType.number);\n  const points = joinedSeries.map((series) => new Float64Array(series.values));\n\n  try {\n    const detector = OutlierDetector.dbscan({ sensitivity: 0.4 }).preprocess(points);\n    outliers = detector.detect();\n  } catch (e) {\n    console.error(e);\n    outliers = undefined;\n  }\n};\n\nlet outliers: OutlierOutput | undefined = undefined;\n\nexport const calculateOutlierValue = (series: DataFrame[], data: DataFrame): number => {\n  if (!wasmSupported()) {\n    throw new Error('WASM not supported, fall back to stdDev');\n  }\n  if (!outliers) {\n    throw new Error('Initialize outlier detector first');\n  }\n\n  const index = series.indexOf(data);\n  if (outliers.seriesResults[index].isOutlier) {\n    return -outliers.seriesResults[index].outlierIntervals.length;\n  }\n\n  return 0;\n};\n\nexport const sortSeriesByName = (series: DataFrame[], direction: string) => {\n  const sortedSeries = [...series];\n  sortedSeries.sort((a, b) => {\n    const valueA = getLabelValueFromDataFrame(a);\n    const valueB = getLabelValueFromDataFrame(b);\n    if (!valueA || !valueB) {\n      return 0;\n    }\n    return valueA?.localeCompare(valueB) ?? 0;\n  });\n  if (direction === 'desc') {\n    sortedSeries.reverse();\n  }\n  return sortedSeries;\n};\n\nexport const wasmSupported = () => {\n  const support = typeof WebAssembly === 'object';\n\n  if (!support) {\n    reportExploreMetrics('wasm_not_supported', {});\n  }\n\n  return support;\n};\n","import { type AdHocVariableFilter } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\n\nimport { type LabelBreakdownSortingOption as BreakdownSortByOption } from 'Breakdown/SortByScene';\nimport { type ActionViewType } from 'MetricActionBar';\nimport { type SortingOption as MetricsReducerSortByOption } from 'WingmanDataTrail/ListControls/MetricsSorter/MetricsSorter';\n\nimport { type BreakdownLayoutType } from './Breakdown/types';\nimport { PLUGIN_ID } from './constants';\nimport { GIT_COMMIT } from './version';\n\nexport type ViewName = 'metrics-reducer' | 'metric-details';\n\ntype Interactions = {\n  // User selected a label to view its breakdown.\n  label_selected: {\n    label: string;\n    cause: // By clicking the \"select\" button on that label's breakdown panel\n    | 'breakdown_panel'\n      // By clicking on the label selector at the top of the breakdown\n      | 'selector';\n  };\n  // User changed a label filter\n  label_filter_changed: {\n    label: string;\n    action: 'added' | 'removed' | 'changed';\n    cause: 'breakdown' | 'adhoc_filter';\n  };\n  // User changed the breakdown layout\n  breakdown_layout_changed: { layout: BreakdownLayoutType };\n  // A metric exploration has started due to one of the following causes\n  exploration_started: {\n    cause: 'bookmark_clicked';\n  };\n  // A user has changed a bookmark\n  bookmark_changed: {\n    action: // Toggled on or off from the bookmark icon\n    | 'toggled_on'\n      | 'toggled_off'\n      // Deleted from the sidebar bookmarks list\n      | 'deleted';\n  };\n  // User changes metric explore settings\n  settings_changed: { stickyMainGraph?: boolean };\n  // User clicks on tab to change the action view\n  metric_action_view_changed: {\n    view: ActionViewType;\n\n    // The number of related logs\n    related_logs_count?: number;\n  };\n  // User clicks on one of the action buttons associated with a selected metric\n  selected_metric_action_clicked: {\n    action: // Opens the metric queries in Explore\n    | 'open_in_explore'\n      // Clicks on the share URL button\n      | 'share_url'\n      // Deselects the current selected metrics by clicking the \"Select new metric\" button\n      | 'unselect'\n      // When in embedded mode, clicked to open the exploration from the embedded view\n      | 'open_from_embedded';\n  };\n  // User clicks on one of the action buttons associated with related logs\n  related_logs_action_clicked: {\n    action: // Opens Logs Drilldown\n    | 'open_logs_drilldown'\n      // Logs data source changed\n      | 'logs_data_source_changed';\n  };\n  // User selects a metric\n  metric_selected: {\n    from: // By clicking \"Select\" on a metric panel when on the no-metric-selected metrics list view\n    | 'metric_list'\n      // By clicking \"Select\" on a metric panel when on the related metrics tab\n      | 'related_metrics';\n    // The number of search terms activated when the selection was made\n    searchTermCount: number | null;\n  };\n  // User opens/closes the prefix filter dropdown\n  prefix_filter_clicked: {\n    from: // By clicking \"Select\" on a metric panel when on the no-metric-selected metrics list view\n    | 'metric_list'\n      // By clicking \"Select\" on a metric panel when on the related metrics tab\n      | 'related_metrics';\n    action: // Opens the dropdown\n    | 'open'\n      // Closes the dropdown\n      | 'close';\n  };\n  // User types in the quick search bar\n  quick_search_used: {};\n  sorting_changed:\n    | {\n        // By clicking on the sort by variable in the metrics reducer\n        from: 'metrics-reducer';\n        // The sort by option selected\n        sortBy: MetricsReducerSortByOption;\n      }\n    | {\n        // By clicking on the sort by component in the label breakdown\n        from: 'label-breakdown';\n        // The sort by option selected\n        sortBy: BreakdownSortByOption;\n      };\n  wasm_not_supported: {};\n  native_histogram_examples_closed: {};\n  native_histogram_example_clicked: {\n    metric: string;\n  };\n  // User toggles the Wingman sidebar\n  metrics_sidebar_toggled: {\n    action: // Opens the sidebar section\n    | 'opened'\n      // Closes the sidebar section\n      | 'closed';\n    section?: string;\n  };\n  // User clicks into the prefix filter section of the sidebar\n  sidebar_prefix_filter_section_clicked: {};\n  // User applies any prefix filter from the sidebar\n  sidebar_prefix_filter_applied: {\n    // Number of prefix filters applied (optional)\n    filter_count?: number;\n  };\n  // User clicks into the suffix filter section of the sidebar\n  sidebar_suffix_filter_section_clicked: {};\n  // User applies any suffix filter from the sidebar\n  sidebar_suffix_filter_applied: {\n    // Number of suffix filters applied (optional)\n    filter_count?: number;\n  };\n  // User selects a rules filter from the Wingman sidebar\n  sidebar_rules_filter_selected: {\n    filter_type: 'non_rules_metrics' | 'recording_rules';\n  };\n  // User applies a label filter from the sidebar\n  sidebar_group_by_label_filter_applied: {\n    label: string;\n  };\n  app_initialized: {\n    view: ViewName;\n  };\n};\n\nconst INTERACTION_NAME_PREFIX = 'grafana_explore_metrics_';\n\nexport function reportExploreMetrics<E extends keyof Interactions, P extends Interactions[E]>(event: E, payload: P) {\n  reportInteraction(`${INTERACTION_NAME_PREFIX}${event}`, {\n    ...payload,\n    meta: {\n      // same naming as Faro (see src/tracking/faro/faro.ts)\n      appRelease: config.apps[PLUGIN_ID].version,\n      appVersion: GIT_COMMIT,\n    },\n  });\n}\n\n/**\n * Reports a single label filter change event\n */\nfunction reportLabelFilterChange(label: string, action: 'added' | 'removed' | 'changed') {\n  reportExploreMetrics('label_filter_changed', {\n    label,\n    action,\n    cause: 'adhoc_filter',\n  });\n}\n\n/**\n * Detects and reports changes to an existing filter\n */\nfunction detectChangedFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  for (const oldFilter of oldFilters) {\n    for (const newFilter of newFilters) {\n      if (oldFilter.key === newFilter.key && oldFilter.value !== newFilter.value) {\n        reportLabelFilterChange(oldFilter.key, 'changed');\n      }\n    }\n  }\n}\n\n/**\n * Detects and reports removed filters\n */\nfunction detectRemovedFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  for (const oldFilter of oldFilters) {\n    const stillExists = newFilters.some((newFilter) => newFilter.key === oldFilter.key);\n    if (!stillExists) {\n      reportLabelFilterChange(oldFilter.key, 'removed');\n    }\n  }\n}\n\n/**\n * Detects and reports added filters\n */\nfunction detectAddedFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  for (const newFilter of newFilters) {\n    const isNew = !oldFilters.some((oldFilter) => oldFilter.key === newFilter.key);\n    if (isNew) {\n      reportLabelFilterChange(newFilter.key, 'added');\n    }\n  }\n}\n\n/** Detect the single change in filters and report the event, assuming it came from manipulating the adhoc filter */\nexport function reportChangeInLabelFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  if (newFilters.length === oldFilters.length) {\n    // Same number of filters - check for changed values\n    detectChangedFilters(newFilters, oldFilters);\n  } else if (newFilters.length < oldFilters.length) {\n    // Filters were removed\n    detectRemovedFilters(newFilters, oldFilters);\n  } else {\n    // Filters were added\n    detectAddedFilters(newFilters, oldFilters);\n  }\n}\n","import { type DataFrame } from '@grafana/data';\n\nexport function getLabelValueFromDataFrame(frame: DataFrame) {\n  const labels = frame.fields[1]?.labels;\n\n  if (!labels) {\n    return null;\n  }\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return null;\n  }\n\n  return labels[keys[0]];\n}\n"],"names":["sortSeries","memoize","series","sortBy","direction","sortSeriesByName","initOutlierDetector","reducer","dataFrame","fieldReducer","calculateOutlierValue","e","console","error","ReducerID","stdDev","fieldReducers","get","value","reduce","fields","doStandardCalcs","seriesCalcs","map","sort","a","b","undefined","reverse","firstTimestamp","seriesIsNotEmpty","values","lastTimestamp","length","getLabelValueFromDataFrame","wasmSupported","joined","outerJoinDataFrames","frames","points","filter","f","type","FieldType","number","Float64Array","detector","OutlierDetector","dbscan","sensitivity","preprocess","outliers","detect","data","Error","index","indexOf","seriesResults","isOutlier","outlierIntervals","sortedSeries","valueA","valueB","localeCompare","support","WebAssembly","reportExploreMetrics","INTERACTION_NAME_PREFIX","event","payload","reportInteraction","meta","appRelease","config","apps","PLUGIN_ID","version","appVersion","GIT_COMMIT","reportLabelFilterChange","label","action","cause","reportChangeInLabelFilters","newFilters","oldFilters","oldFilter","newFilter","key","detectChangedFilters","some","detectRemovedFilters","detectAddedFilters","frame","labels","keys","Object"],"sourceRoot":""}