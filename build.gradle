plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'garabu'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'com.google.firebase:firebase-admin:9.4.3'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.mysql:mysql-connector-j'
	implementation 'com.github.mwiede:jsch:0.2.16'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	testImplementation("org.junit.vintage:junit-vintage-engine") {
		exclude group: "org.hamcrest", module: "hamcrest-core"
	}
	runtimeOnly 'com.mysql:mysql-connector-j'
	//runtimeOnly 'com.h2database:h2'
}


tasks.named('test') {
	useJUnitPlatform()
}

// Elastic Beanstalk 배포용 JAR 생성
task buildForEB(type: Copy, dependsOn: build) {
	description = 'Build JAR for Elastic Beanstalk deployment'
	from "build/libs"
	into "eb-deploy"
	include "*.jar"
	rename { filename ->
		filename.replace("-${version}", "")  // 버전 제거
	}
	
	doLast {
		println "✅ Elastic Beanstalk 배포용 JAR 생성 완료: eb-deploy/"
		println "📁 업로드할 파일: eb-deploy/garabuserver.jar"
	}
}

// 프로덕션 빌드 (SSH 터널링 비활성화)
task buildProd {
	description = 'Build for production without SSH tunneling'
	group = 'build'
	
	doFirst {
		println "🚀 프로덕션 빌드 시작 (SSH 터널링 비활성화)"
		println "📋 프로파일: eb (Elastic Beanstalk)"
	}
	
	dependsOn clean, build, buildForEB
	
	doLast {
		println ""
		println "🎉 Elastic Beanstalk 배포 준비 완료!"
		println "📦 배포 파일: eb-deploy/garabuserver.jar"
		println ""
		println "📋 다음 단계:"
		println "1. AWS Console → Elastic Beanstalk"
		println "2. Create Application → Java platform"
		println "3. Upload eb-deploy/garabuserver.jar"
		println "4. 환경변수는 .ebextensions/environment.config에 설정됨"
	}
}
